// Script pour analyser les tokens JWT Clerk
// Usage: node debug-tokens.js

// Fonction pour d√©coder un JWT sans v√©rification (natif)
function decodeJWT(token) {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      throw new Error('Token JWT invalide');
    }
    
    const header = JSON.parse(Buffer.from(parts[0], 'base64url').toString());
    const payload = JSON.parse(Buffer.from(parts[1], 'base64url').toString());
    
    return {
      header,
      payload,
      signature: parts[2]
    };
  } catch (error) {
    console.error('‚ùå Erreur d√©codage JWT:', error.message);
    return null;
  }
}

// Fonction pour analyser la compatibilit√© Supabase
function analyzeSupabaseCompatibility(payload) {
  if (!payload) return { compatible: false, issues: ['Token invalide'] };
  
  const issues = [];
  const requirements = {
    aud: 'authenticated',
    role: 'authenticated',
    sub: 'user ID',
    iss: 'issuer'
  };
  
  // V√©rifier audience
  if (!payload.aud || (Array.isArray(payload.aud) ? !payload.aud.includes('authenticated') : payload.aud !== 'authenticated')) {
    issues.push('‚ùå Audience "authenticated" manquante');
  } else {
    console.log('‚úÖ Audience correcte:', payload.aud);
  }
  
  // V√©rifier role
  if (!payload.role || payload.role !== 'authenticated') {
    issues.push('‚ùå Role "authenticated" manquant (actuel: ' + payload.role + ')');
  } else {
    console.log('‚úÖ Role correct:', payload.role);
  }
  
  // V√©rifier subject
  if (!payload.sub) {
    issues.push('‚ùå Subject (sub) manquant');
  } else {
    console.log('‚úÖ Subject pr√©sent:', payload.sub);
  }
  
  // V√©rifier issuer
  if (!payload.iss) {
    issues.push('‚ùå Issuer (iss) manquant');
  } else {
    console.log('‚úÖ Issuer pr√©sent:', payload.iss);
  }
  
  return {
    compatible: issues.length === 0,
    issues,
    score: ((4 - issues.length) / 4) * 100
  };
}

console.log('üîç Analyseur de Tokens JWT Clerk pour Supabase');
console.log('================================================\n');

// Instructions pour l'utilisateur
console.log('üìã Instructions:');
console.log('1. Ouvrez votre navigateur sur http://localhost:3000/dashboard');
console.log('2. Ouvrez la console d√©veloppeur (F12)');
console.log('3. Ex√©cutez cette commande pour r√©cup√©rer le token par d√©faut:');
console.log('   window.__clerk_session?.getToken().then(token => console.log("DEFAULT_TOKEN:", token))');
console.log('');
console.log('4. Ex√©cutez cette commande pour r√©cup√©rer le token Supabase (si configur√©):');
console.log('   window.__clerk_session?.getToken({template: "supabase"}).then(token => console.log("SUPABASE_TOKEN:", token)).catch(e => console.log("SUPABASE_ERROR:", e))');
console.log('');
console.log('5. Copiez les tokens et relancez ce script avec:');
console.log('   node debug-tokens.js "VOTRE_TOKEN_ICI"');
console.log('');

// Si un token est fourni en argument
if (process.argv[2]) {
  const token = process.argv[2];
  console.log('üé´ Analyse du token fourni...\n');
  
  const decoded = decodeJWT(token);
  
  if (decoded) {
    console.log('üìã Header JWT:');
    console.log(JSON.stringify(decoded.header, null, 2));
    console.log('\nüìã Payload JWT:');
    console.log(JSON.stringify(decoded.payload, null, 2));
    
    console.log('\nüîç Analyse de compatibilit√© Supabase:');
    const compatibility = analyzeSupabaseCompatibility(decoded.payload);
    
    console.log(`\nüìä Score de compatibilit√©: ${compatibility.score}%`);
    
    if (compatibility.compatible) {
      console.log('üéâ ‚úÖ Token compatible avec Supabase RLS !');
    } else {
      console.log('‚ö†Ô∏è ‚ùå Token NON compatible avec Supabase RLS');
      console.log('\nüîß Probl√®mes d√©tect√©s:');
      compatibility.issues.forEach(issue => console.log('  ' + issue));
      
      console.log('\nüí° Solution recommand√©e:');
      console.log('1. Cr√©er un JWT Template "supabase" dans Clerk Dashboard');
      console.log('2. Configurer les claims suivants:');
      console.log('   {');
      console.log('     "aud": "authenticated",');
      console.log('     "role": "authenticated",');
      console.log('     "sub": "{{user.id}}"');
      console.log('   }');
    }
  }
} else {
  console.log('‚è≥ En attente d\'un token √† analyser...');
  console.log('üí° Tip: Vous pouvez aussi utiliser jwt.io pour d√©coder manuellement');
}