#!/usr/bin/env node

/**
 * Script de nettoyage des donn√©es d'ingestion TidiMondo
 * Supprime toutes les donn√©es cr√©√©es par le syst√®me d'ingestion
 */

// Charger les variables d'environnement
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

class CleanupManager {
  constructor() {
    this.systemUserId = null;
  }

  async run() {
    try {
      console.log('üßπ Nettoyage des donn√©es d\'ingestion TidiMondo');
      console.log('==================================================');

      // R√©cup√©rer l'ID de l'utilisateur syst√®me
      await this._getSystemUserId();

      if (!this.systemUserId) {
        console.log('‚ÑπÔ∏è Aucun utilisateur syst√®me trouv√©, rien √† nettoyer');
        return;
      }

      console.log(`üéØ Nettoyage des donn√©es de l'utilisateur syst√®me: ${this.systemUserId}`);

      // Supprimer dans l'ordre (contraintes de cl√©s √©trang√®res)
      await this._cleanupRecipeRelations();
      await this._cleanupRecipes();
      await this._cleanupIngredients();
      await this._cleanupUstensiles();
      await this._cleanupAuditLogs();

      console.log('\n‚úÖ Nettoyage termin√© avec succ√®s !');
      console.log('üöÄ Vous pouvez maintenant relancer la pipeline sur une base propre.');

    } catch (error) {
      console.error('\n‚ùå Erreur lors du nettoyage:', error.message);
      process.exit(1);
    }
  }

  async _getSystemUserId() {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('id')
        .eq('clerk_user_id', 'system_content_ingestion')
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      this.systemUserId = data?.id;
      
      if (this.systemUserId) {
        console.log(`üë§ Utilisateur syst√®me trouv√©: ${this.systemUserId}`);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur syst√®me:', error);
      throw error;
    }
  }

  async _cleanupRecipeRelations() {
    console.log('\nüîó Suppression des relations de recettes...');

    try {
      // D'abord r√©cup√©rer les IDs des recettes du syst√®me
      const { data: recettes, error: recettesError } = await supabase
        .from('recettes')
        .select('id')
        .eq('user_id', this.systemUserId);

      if (recettesError) {
        throw recettesError;
      }

      if (!recettes || recettes.length === 0) {
        console.log('‚ÑπÔ∏è Aucune recette syst√®me √† nettoyer');
        return;
      }

      const recetteIds = recettes.map(r => r.id);
      console.log(`üîç ${recetteIds.length} recettes syst√®me trouv√©es`);

      // Supprimer les relations recette_ingredients
      const { error: ingredientsError } = await supabase
        .from('recette_ingredients')
        .delete()
        .in('recette_id', recetteIds);

      if (ingredientsError) {
        console.warn('‚ö†Ô∏è Erreur suppression recette_ingredients:', ingredientsError.message);
      } else {
        console.log('‚úÖ Relations recette_ingredients supprim√©es');
      }

      // Supprimer les relations recette_ustensiles
      const { error: ustensilesError } = await supabase
        .from('recette_ustensiles')
        .delete()
        .in('recette_id', recetteIds);

      if (ustensilesError) {
        console.warn('‚ö†Ô∏è Erreur suppression recette_ustensiles:', ustensilesError.message);
      } else {
        console.log('‚úÖ Relations recette_ustensiles supprim√©es');
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des relations:', error);
      throw error;
    }
  }

  async _cleanupRecipes() {
    console.log('\nüìù Suppression des recettes syst√®me...');

    try {
      const { data, error } = await supabase
        .from('recettes')
        .delete()
        .eq('user_id', this.systemUserId)
        .select('id, nom');

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} recettes supprim√©es`);
      if (data && data.length > 0) {
        data.forEach(recipe => {
          console.log(`   - ${recipe.nom} (${recipe.id})`);
        });
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des recettes:', error);
      throw error;
    }
  }

  async _cleanupIngredients() {
    console.log('\nü•¨ Suppression des ingr√©dients syst√®me...');

    try {
      const { data, error } = await supabase
        .from('ingredients')
        .delete()
        .eq('user_id', this.systemUserId)
        .select('id, nom');

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} ingr√©dients supprim√©s`);
      if (data && data.length > 0) {
        data.forEach(ingredient => {
          console.log(`   - ${ingredient.nom} (${ingredient.id})`);
        });
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des ingr√©dients:', error);
      throw error;
    }
  }

  async _cleanupUstensiles() {
    console.log('\nüî™ Suppression des ustensiles syst√®me...');

    try {
      const { data, error } = await supabase
        .from('ustensiles')
        .delete()
        .eq('user_id', this.systemUserId)
        .select('id, nom');

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} ustensiles supprim√©s`);
      if (data && data.length > 0) {
        data.forEach(ustensile => {
          console.log(`   - ${ustensile.nom} (${ustensile.id})`);
        });
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des ustensiles:', error);
      throw error;
    }
  }

  async _cleanupAuditLogs() {
    console.log('\nüìä Suppression des logs d\'audit...');

    try {
      const { data, error } = await supabase
        .from('ingestion_audit_log')
        .delete()
        .eq('system_user_id', this.systemUserId)
        .select('id, batch_name');

      if (error) {
        throw error;
      }

      console.log(`‚úÖ ${data?.length || 0} logs d'audit supprim√©s`);

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des logs:', error);
      throw error;
    }
  }

  async showStats() {
    try {
      console.log('\nüìä Statistiques avant nettoyage:');
      console.log('================================');

      if (!this.systemUserId) {
        await this._getSystemUserId();
      }

      if (!this.systemUserId) {
        console.log('‚ÑπÔ∏è Aucun utilisateur syst√®me trouv√©');
        return;
      }

      const [recettes, ingredients, ustensiles, logs] = await Promise.all([
        supabase.from('recettes').select('id', { count: 'exact' }).eq('user_id', this.systemUserId),
        supabase.from('ingredients').select('id', { count: 'exact' }).eq('user_id', this.systemUserId),
        supabase.from('ustensiles').select('id', { count: 'exact' }).eq('user_id', this.systemUserId),
        supabase.from('ingestion_audit_log').select('id', { count: 'exact' }).eq('system_user_id', this.systemUserId)
      ]);

      console.log(`üìù Recettes syst√®me: ${recettes.count || 0}`);
      console.log(`ü•¨ Ingr√©dients syst√®me: ${ingredients.count || 0}`);
      console.log(`üî™ Ustensiles syst√®me: ${ustensiles.count || 0}`);
      console.log(`üìä Logs d'audit: ${logs.count || 0}`);

    } catch (error) {
      console.error('‚ùå Erreur lors du calcul des statistiques:', error);
    }
  }
}

async function main() {
  const args = process.argv.slice(2);
  const cleanup = new CleanupManager();

  if (args.includes('--stats')) {
    await cleanup.showStats();
    return;
  }

  if (args.includes('--help')) {
    console.log(`
Script de nettoyage de la pipeline d'ingestion TidiMondo

Usage: node cleanup.js [options]

Options:
  --stats     Afficher les statistiques sans nettoyer
  --help      Afficher cette aide

Exemples:
  node cleanup.js          # Nettoyer toutes les donn√©es syst√®me
  node cleanup.js --stats  # Voir ce qui serait supprim√©
`);
    return;
  }

  await cleanup.run();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = CleanupManager;